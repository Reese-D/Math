#+STARTUP: latexpreview
#+NAME: reese

* Chapter 1.1
** Helper functions

#+BEGIN_SRC haskell :exports both
createGeometricProgression :: (Floating x, Integral y) => (x -> x) -> y -> y -> [x]
createGeometricProgression f j n
  | n < j = []
  | n >= j = (f j) ++ (createGeometricProgression f (j+1) n)
#+END_SRC

binomial coefficient
#+BEGIN_SRC haskell
  productList :: (Floating x, Integral y) => x -> x -> y -> y -> [x]
  productList a r j n
    | n < j = []
    | n >= j = 
        binomialCoefficient :: Num x => x -> x -> x  
#+END_SRC

some very simple helper functions
#+BEGIN_SRC haskell
      summation :: Num a => [a] -> a
      summation [] = 0
      summation (x:xs) = x + summation xs

      factorial ::(Integral x) => x -> x
      factorial n = foldl (*) 1 $ range n
#+END_SRC

progressions, these take a starting and ending value, incrementing from the starting value to the ending value and applying a function to each result
#+BEGIN_SRC haskell
      createProgression :: (Num x, Integral y) => (y -> x) -> y -> y -> [x]
      createProgression f j n
        | n < j = []
        | n >= j = [(f j)] ++ (createProgression f (j+1) n)
#+END_SRC

the geometric progression, with the sum defined as
$\sum_{j}^n ar^j$
#+BEGIN_SRC haskell

      geometric :: (Floating x, Integral y) => x -> x -> y -> x
      geometric a r j = a * (r ** (fromIntegral j))
#+END_SRC

progressions can also be used to make some simple range functions
#+BEGIN_SRC haskell

      identity :: (Num x, Integral y) => (y -> x)
      identity t = fromIntegral t

      range :: Integral x => x -> [x]
      range j = createProgression (identity) 1 j

      rangeI :: Integral x => x -> x -> [x]
      rangeI i j = createProgression (identity) i j
#+END_SRC

Binomail Coefficients
$\binom{m}{k} = \frac{m!}{k!(m-k)!}$
#+BEGIN_SRC haskell
      binomialCoefficient :: (Integral x, Fractional y) => x -> x -> y
      binomialCoefficient m k =
        (fromIntegral mFactorial) / (fromIntegral denominator)
        where mFactorial = factorial m
              kFactorial = factorial k
              denominator = kFactorial * (factorial (m - k))
#+END_SRC

** Coding solutions

*** problem 1
the createProgression helper function applies a given function (geometric 1 2) on a range of numbers from (1) to (5) in this example. You can find them defined in the helpers section

The "geometric" summation function is defined as:
$\sum_{j}^n ar^j$

Our progression is just a list of the equation $ar^j$ where a = 1, r = 2, and with j values of 1 through 5.

Then we simply sum up the progression at the end.
#+BEGIN_SRC haskell

      --- PROBLEMS 1.1
      --Find the sum of the terms of a geometric series 
      problem_1_1_1 :: IO ()
      problem_1_1_1 = do
        let ourGeometricProgression = createProgression (geometric 1 2) 1 5
        print ourGeometricProgression
        print "the summation is" 
        print $ foldl (+) 0 ourGeometricProgression
#+END_SRC

*** Problem 2
See the factorial helper function. This is pretty simple and I don't think it needs much explanation, it's just a list of numbers from 1 to n all multiplied together
#+BEGIN_SRC haskell

      --Evaluate n!
      problem_1_1_2 :: IO ()
      problem_1_1_2 = do
        let n = 5
        let factorial = range n
        putStrLn "5! is"
        print $ foldl (*) 1 factorial
#+END_SRC

*** Problem 3
see the binomial coefficient helper function. It's a fairly straightforward math equation again so I won't add much explanation
#+BEGIN_SRC haskell

      --Evaluate binomial coefficients
      problem_1_1_3 :: IO ()
      problem_1_1_3 = do
        let m = 7
        let k = 4
        putStrLn "Binomial coefficient where m = 7 and k = 4"
        print $ binomialCoefficient m k

#+END_SRC

*** Problem 4
we'll need a few helpers for this, ListAndSize can be though of as a tuple of a list and its corresponding length
Then two helper functions are used to pull either value

We start with a range of numbers from 0 to numRows [0,1,2,3,4,5,6,7,8.9,10]
Then for each of these we create a list from 0 to the value. For example, the first three [0,1,2] become [[0],[0,1],[0,1,2]]
This list is the beginning of our pascal triangle. you'll notice each item is the correct length for pascals triangle but has the wrong values
Now I add a simple transformation to make a list like [0,1,2] become a ListAndSize pair of [0,1,2] 2
The final step is to simply create a binomial coefficient out of each item. for the list [0,1,2] we would put 0, 1, or 2 as the k value and the length (2) as the m value
#+BEGIN_SRC haskell
data ListAndSize x = ListAndSize [x] Int deriving (Show, Read)
getList :: ListAndSize x -> [x]
getList (ListAndSize xs y) = xs

getSize :: ListAndSize x -> Int
getSize (ListAndSize xs y) = y

getListAndSize :: [x] -> ListAndSize x
getListAndSize xs = ListAndSize xs ((length xs) - 1)

--Print out pascals triangle, (i'll do first 10 rows)
problem_1_1_4 :: IO ()
problem_1_1_4 = do
  let numRows = rangeI 0 10
  let triangle = map (rangeI 0) numRows
  let listSizeTriangle = map getListAndSize triangle
  let pascalsTriangle = map mapInner listSizeTriangle
  mapM_ print pascalsTriangle
  where
    mapInner (ListAndSize xs y) = map (binomialCoefficient y) xs
#+END_SRC

*** Problem 5
Tower of Hanoi!

After playing around with the tower of hanoi online and trying to view it through a recursive perspective, I noticed a few rules
1) the base case of one ring can just be to move the ring to whichever position you want
2) Tower of hanoi is a recursive problem, you need to move the current ring to the destination, and the entire stack on top of the current ring to an empty post
3) After 2 is complete, you have to move that substack back onto the current ring

In my solution we assume there are 3 posts. These posts are labeled 0, 1, and 2. the GetMissing function takes any 2 of these posts and returns whichever post wasn't given. This helps to find our adjacent stack

The solution is as follows:
If we're the smallest ring just move and end the game
If we're not the samllest ring, run this algorithm for the next smallest ring but move it to the adjecent post instead of our goal post. Since this is recursive it means the entire set of rings that are smaller than this ring will be neatly stacked at the adjacent post.
We're now free to move our current ring on to our goal post.
Finally we just need to move all of the smaller rings on the adjacent stack back on top of our goal post.
#+BEGIN_SRC haskell
getMissing :: (Integral x) => x -> x -> x
getMissing x y
  | x + y == 1 = 2
  | x + y == 3 = 0
  | x + y == 2 = 1

--let the result be a list of pairs
--each pair represents the index of the ring you're moving from and the index of the ring you're moving to
--assumes there are 3 posts, all rings of the given number and less are stacked on currentStack
towerOfHanoiSolver :: (Integral x) => x -> x -> x -> [[x]]
towerOfHanoiSolver numRings currentStack goalPost
  | numRings == 1 = [[currentStack, goalPost]] -- if we have one ring just move to our goal
  | otherwise = towerOfHanoiSolver (numRings - 1) currentStack (getMissing goalPost currentStack) --solve the substack to the opposite post
                ++ [[currentStack, goalPost]] -- move over to our goal post
                ++ towerOfHanoiSolver (numRings - 1) (getMissing goalPost currentStack) goalPost -- the substack is now on the opposite post, solve it back to our post

--List the moves in tower of hanoi
problem_1_1_5 :: IO ()
problem_1_1_5 = do
  --tower of hanoi inputs:
  --4 rings
  --moving from post 0 to post 2
   let solution =  towerOfHanoiSolver 4 0 2
   print solution
  --tower of hanoi output:

  --a list of pairs [x,y]. The player needs to take the top ring from the post at index x and move it to the post at index y
  --there are 3 posts indexed 0, 1, and 2

  --example output [[0,1],[0,2],[1,2]]
  --this would mean we take the top ring from the left most post (index 0) and move it to the middle post (index 1)
  --then we move the next ring from the left most post and move it all the way to the right
  --finally we take the middle ring, the first one we moved, and put it on the far right post. This is the solution for a 2 ring tower of hanoi (towerOfHanoiSolver 2 0 2)

#+END_SRC

See the binomial theorem below
$(x + y)^n = \sum_{j=0}^n \binom{n}{j} x^{(n-j)} y^j$

We want to expand this, so I've broken it into three parts

the binomial portion
$\binom{n}{j}$

the x values
$x^{(n-j)}$

and the y values
$y^j$

since it's a sum I represent each summation piece in a list. The three above parts are all multiplied together.

Finally I show the resultant sum as evidence the summation list is correct. (3+7)^5 = 100000
*** Problem 6
#+BEGIN_SRC haskell

      --Expand (x+y)^n, where n is a positive integer using the binomial theorem
      --The idea is to create 3 lists, one representing the [m k] binomial coefficient value
      -- one representing the x part and another list representing the y part
      -- at the end we can just multiply all 3 together
      problem_1_1_6 :: IO ()
      problem_1_1_6 = do
        let n = 5 :: Int
        let x = 3.0 :: Float
        let y = 7.0 :: Float
        --we'll have to create a list of binomial coefficients from [n, 0] to [n, n]
        --start with a list from 0 to n
        let nums = rangeI 0 n
        --now we can make each number a pair [x,y]. The numbers we have fit y so x is always just n
        let binomialInts = map (\a -> [n, a]) nums :: [[Int]]
        let binomials = map (\a -> [fromIntegral n, fromIntegral a]) nums :: [[Float]]
        print "our binomial portion"
        print binomials

        let xValues = map (binomialToXs x) binomials
        print "x portion"
        print xValues

        let yValues = map (binomialToYs y) binomials
        print "y portion"
        print yValues

        let binomialsSolved = map (\(a:b:_) -> binomialCoefficient (toInteger a)  (toInteger b)) binomialInts
        print "binomail portion"

        print binomialsSolved
        print "all together now"
        let xsAndYs = zipWith (*) xValues yValues
        let allTogether = zipWith (*) binomialsSolved xsAndYs
        print allTogether

        print "summed"
        print $ foldl (+) 0 allTogether

        where
          binomialToXs :: (Floating a) => a -> [a] -> a
          binomialToXs x (a:b:_) = x ** (a - b)
          binomialToYs :: (Floating a) => a -> [a] -> a
          binomialToYs y (a:b:_) =  y ** b

#+END_SRC
